---
openapi: "3.0.0"
info:
  version: "4.0.0-RC3"
  title: "TheHive"
tags:
  - name: "Authentication"
    description: "Authentication related APIs"
  - name: "Query"
    description: "Query APIs"
  - name: "Organisation"
    description: "Organisation related APIs"
  - name: "Profile"
    description: "Profile related APIs"
  - name: "User"
    description: "User related APIs"
paths:
  /api/v1/login:
    post:
      tags:
        - "Authentication"
      summary: "Authenticate an user and get session cookie"
      requestBody:
        description: "Credentials"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: "Authentication succeeds"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputUser'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '402':
          description: "Multi-factor code is required"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /api/v1/query:
    post:
      tags:
        - "Query"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Query'
      responses:
        '200':
          description: "result"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AnyOutputObject'
                  - type: array
                    items:
                      $ref: '#/components/schemas/AnyOutputObject'
      security:
        - Authenticated: []
  /api/v0/organisation:
    get:
      tags:
        - "Organisation"
      summary: "List visible organisations"
      description: "This API include, for each organisation, the linked organisation"
      responses:
        '200':
          description: "List of organisations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutputOrganisationWithLinksV0'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
  /api/v1/organisation:
    post:
      tags:
        - "Organisation"
      summary: "Create an organisation"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputOrganisation'
      responses:
        '201':
          description: "The organisation is created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputOrganisation'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
      security:
        - Authenticated:
            - manageOrganisation
  /api/v1/organisation/{org}:
    patch:
      tags:
        - "Organisation"
      summary: "Update organisation information"
      parameters:
        - name: org
          in: path
          description: "Id or name of the organisation to update"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationProperties'
      responses:
        '204':
          description: "The organisation has been updated"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageOrganisation
  /api/v0/organisation/{org1}/link/{org2}:
    put:
      tags:
        - "Organisation"
      summary: "Link two organisations"
      parameters:
        - name: org1
          in: path
          description: "Id or name of the first organisation"
          required: true
          schema:
            type: string
        - name: org2
          in: path
          description: "Id or name of the second organisation"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "The organisations have been linked"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageOrganisation
    delete:
      tags:
        - "Organisation"
      summary: "Remove link between two organisations"
      parameters:
        - name: org1
          in: path
          description: "Id or name of the first organisation"
          required: true
          schema:
            type: string
        - name: org2
          in: path
          description: "Id or name of the second organisation"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "The link between organisations had been removed"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageOrganisation
  /api/v0/organisation/{org}/links:
    put:
      tags:
        - "Organisation"
      summary: "Link an organisation with several others"
      parameters:
        - name: org
          in: path
          description: "Id or name of the organisation to link"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - organisations
              properties:
                organisations:
                  description: "List of organisation to link with"
                  type: array
                  items:
                    type: string
      responses:
        '204':
          description: "The organisations have been linked"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageOrganisation
  /api/v0/profile:
    get:
      tags:
        - "Profile"
      summary: "List all user profiles"
      responses:
        '200':
          description: "List of all user profiles"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutputProfileV0'
        '401':
          $ref: '#/components/responses/AuthenticationError'
      security:
        - Authenticated: []
    post:
      tags:
        - "Profile"
      summary: "Create a new profile"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputProfile'
      responses:
        '204':
          description: "The profile has been created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputProfileV0'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
      security:
        - Authenticated:
            - manageProfile
  /api/v0/profile/{profile}:
    get:
      tags:
        - "Profile"
      summary: "Get information of the given profile"
      parameters:
        - name: profile
          in: path
          description: "Id or name of the profile to retrieve"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "The profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputProfileV0'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
    patch:
      tags:
        - "Profile"
      summary: "Update profile"
      parameters:
        - name: profile
          in: path
          description: "Id or name of the profile to update"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileProperties'
      responses:
        '200':
          description: "The profile has been updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputProfileV0'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageProfile
    delete:
      tags:
        - "Profile"
      summary: "Remove the profile"
      parameters:
        - name: profile
          in: path
          description: "Id or name of the profile to delete"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "The profile has been removed"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageProfile
  /api/v1/user:
    post:
      tags:
        - "User"
      summary: "Create a new user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputUser'
      responses:
        '204':
          description: "The user has been created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputUser'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageUser
  /api/v1/user/current:
    get:
      tags:
        - "User"
      summary: "Show information of the current user"
      responses:
        '200':
          description: "Information of the current user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputUser'
        '401':
          $ref: '#/components/responses/AuthenticationError'
      security:
        - Authenticated: []
  /api/v1/user/{user}:
    get:
      tags:
        - "User"
      summary: "Show information of the given user"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Information of the user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputUser'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
    patch:
      tags:
        - "User"
      summary: "Update information of the given user"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProperties'
      responses:
        '200':
          description: "The user has been updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputUser'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
          - manageUser
    delete:
      tags:
        - "User"
      summary: "Lock an user"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "The user has been locked"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageUser
  /api/v1/user/{user}/force:
    delete:
      tags:
        - "User"
      summary: "Remove an user"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
        - name: organisation
          in: query
          description: "Id or name of the organisation from which the user will be removed. If not present use the current organisation"
          required: false
          schema:
            type: string
      responses:
        '204':
          description: "The user has been removed"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageUser
  /user/{user}/avatar:
    get:
      tags:
        - "User"
      summary: "Lock an user"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "The avatar of the user"
          content:
            image/*:
              schema:
                type: string
                format: binary
  /api/v1/user/{user}/password/set:
    post:
      tags:
        - "User"
      summary: "Set the user password"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  description: "The new password"
                  type: string
      responses:
        '204':
          description: "The password has been updated"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
            - manageUser
  /api/v1/user/{user}/password/change:
    post:
      tags:
        - "User"
      summary: "Change the user password"
      parameters:
        - name: user
          in: path
          description: "Id or name of the current user"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - currentPassword
              properties:
                password:
                  description: "The new password"
                  type: string
                currentPassword:
                  description: "The current password"
                  type: string
      responses:
        '204':
          description: "The password has been updated"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
  /api/v1/user/{user}/key:
    get:
      tags:
        - "User"
      summary: "Get the user API key"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "The API key of the user"
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
          - manageUser
    delete:
      tags:
        - "User"
      summary: "Remove the user API key"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "The API key has been removed"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
          - manageUser
  /api/v1/user/{user}/key/renew:
    post:
      tags:
        - "User"
      summary: "Renew the user API key"
      parameters:
        - name: user
          in: path
          description: "Id or name of the user"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "The API key of the user"
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated:
          - manageUser
  /api/v1/pattern/import/attack:
    post:
      tags: 
        - "Pattern"
      summary: "Import MITRE ATT&CK patterns with a .json file"
      responses:
        '201':
          description: "ATT&CK patterns imported"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImportedPattern'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/AuthorizationError'
      security:
        - Authenticated: []
  /api/v1/pattern/{pattern}:
    get:
      tags: 
        - "Pattern"
      summary: "Show information of the given pattern"
      parameters:
        - name: pattern
          in: path
          description: "Id or patternId of the pattern"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Information of the given pattern"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputPattern'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
    delete:
      tags: 
        - "Pattern"
      summary: "Delete the given pattern"
      parameters:
        - name: pattern
          in: path
          description: "Id or name of the pattern"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "Pattern deleted"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
  /api/v1/pattern/case/{case}:
    get:
      tags: 
        - "Pattern"
      summary: "Show patterns of the given case"
      parameters:
        - name: case
          in: path
          description: "Id or name of the case"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Patterns of the given case"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutputPattern'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
  /api/v1/procedure:
    post:
      tags: 
        - "Procedure"
      summary: "Create a procedure"
      requestBody:
        description: "Procedure to create"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputProcedure'
      responses:
        '201':
          description: "Created procedure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputProcedure'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
  /api/v1/procedure/{procedure}:
    get:
      tags: 
        - "Procedure"
      summary: "Show information of the given procedure"
      parameters:
        - name: procedure
          in: path
          description: "Id of the procedure"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Information of the given procedure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputProcedure'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
    delete:
      tags: 
        - "Procedure"
      summary: "Delete the given procedure"
      parameters:
        - name: procedure
          in: path
          description: "Id of the procedure"
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "Procedure deleted"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - Authenticated: []
components:
  responses:
    AuthenticationError:
      description: "User is not authenticated"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
    AuthorizationError:
      description: "The current user is not permitted to do this operation"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
    NotFoundError:
      description: "The requested element is not found or the permission of the user is insufficient"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
  schemas:
    Entity:
      type: object
      required:
        - _id
        - _type
        - _createdAt
        - _createdBy
      properties:
        _id:
          type: string
        _type:
          type: string
        _createdBy:
          type: string
        _createdAt:
          type: integer
        _updatedBy:
          type: string
        _updatedAt:
          type: integer
    GenericError:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
        message:
          type: string
        cause:
          type: string
    Credentials:
      type: object
      required:
        - login
        - password
      properties:
        login:
          description: "User login"
          type: string
        password:
          description: "User password"
          type: string
        organisation:
          description: "Organisation on which the user want to log on"
          type: string
        code:
          description: "Authentication code, for multi-factor authentication"
          type: integer
    AnyOutputObject:
      anyOf:
        - $ref: '#/components/schemas/OutputUser'
        - $ref: '#/components/schemas/OutputOrganisation'
        - $ref: '#/components/schemas/OutputCaseTemplate'
        - $ref: '#/components/schemas/OutputCase'
        - $ref: '#/components/schemas/OutputObservable'
        - $ref: '#/components/schemas/OutputTask'
        - $ref: '#/components/schemas/OutputLog'
        - $ref: '#/components/schemas/OutputAlert'
    InputUser:
      type: object
      required:
        - login
        - name
        - profile
      properties:
        login:
          type: string
        name:
          type: string
        password:
          type: string
        profile:
          type: string
        organisation:
          type: string
        avatar:
          type: string
          format: binary
    OutputUser:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - login
            - name
            - hasKey
            - hasPassword
            - hasMFA
            - locked
            - profile
          properties:
            login:
              type: string
            name:
              type: string
            hasKey:
              type: boolean
            hasPassword:
              type: boolean
            hasMFA:
              type: boolean
            locked:
              type: boolean
            profile:
              type: string
            permissions:
              type: array
              items:
                type: string
            organisation:
              type: string
            avatar:
              type: string
            organisations:
              type: array
              items:
                type: object
                properties:
                  organisation:
                    type: string
                  role:
                    type: string
    UserProperties:
      type: object
      properties:
        login:
          type: string
        name:
          type: string
        locked:
          type: boolean
        avatar:
          type: string
          format: binary
    InputOrganisation:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    OutputOrganisation:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - $ref: '#/components/schemas/InputOrganisation'
    OutputOrganisationWithLinksV0:
      description: "This object is used by version 0 of API. It is deprecated"
      type: object
      required:
        - name
        - description
        - _id
        - id
        - createdAt
        - createdBy
        - _type
        - links
      properties:
        name:
          type: string
        description:
          type: string
        _id:
          type: string
        id:
          type: string
        createdAt:
          type: integer
        createdBy:
          type: string
        updatedAt:
          type: integer
        updatedBy:
          type: string
        _type:
          type: string
        links:
          type: array
          items:
            type: string
    OrganisationProperties:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    InputProfile:
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
    OutputProfileV0:
      type: object
      required:
        - _id
        - id
        - createdBy
        - createdAt
        - _type
        - name
        - permissions
        - editable
        - isAdmin
      properties:
        _id:
          type: string
        id:
          type: string
        createdBy:
          type: string
        updatedBy:
          type: string
        createdAt:
          type: integer
        updatedAt:
          type: integer
        _type:
          type: string
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        editable:
          description: "Indicates if this profile can be updated by an admin"
          type: boolean
        isAdmin:
          description: "If true, this profile can be used only on admin organisation"
          type: boolean
    ProfileProperties:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
    OutputCustomFieldValue:
      type: object
      required:
        - name
        - description
        - tpe
      properties:
        name:
          type: string
        description:
          type: string
        tpe:
          type: string
        value:
          type: string
    OutputCaseTemplate:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - name
            - displayName
            - flag
            - customFields
          properties:
            name:
              type: string
            displayName:
              type: string
            titlePrefix:
              type: string
            description:
              type: string
            severity:
              type: integer
            tags:
              type: array
              items:
                type: string
            flag:
              type: boolean
            tlp:
              type: integer
            pap:
              type: integer
            summary:
              type: string
            customFields:
              type: array
              items:
                $ref: '#/components/schemas/OutputCustomFieldValue'
    OutputCase:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - number
            - title
            - description
            - severity
            - startDate
            - tags
            - flag
            - tlp
            - pap
            - status
            - customFields
          properties:
            number:
              type: integer
            title:
              type: string
            description:
              type: string
            severity:
              type: integer
            startDate:
              type: integer
            endDate:
              type: integer
            tags:
              type: array
              items:
                type: string
            flag:
              type: boolean
            tlp:
              type: integer
            pap:
              type: integer
            status:
              type: string
            summary:
              type: string
            user:
              type: string
            customFields:
              type: array
              items:
                $ref: '#/components/schemas/OutputCustomFieldValue'
    OutputAttachment:
      type: object
      required:
        - name
        - hashes
        - size
        - contentType
        - id
      properties:
        name:
          type: string
        hashes:
          type: array
          items:
            type: string
        size:
          type: integer
        contentType:
          type: string
        id:
          type: string
    OutputObservable:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - dataType
            - tlp
            - tags
            - ioc
            - sighted
          properties:
            dataType:
              type: string
            data:
             type: string
            startDate:
              type: integer
            attachment:
              $ref: '#/components/schemas/OutputAttachment'
            tlp:
              type: integer
            tags:
              type: array
              items:
                type: string
            ioc:
              type: boolean
            sighted:
              type: boolean
            message:
              type: string
            stats:
              type: object
    OutputTask:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - title
            - group
            - status
            - flag
            - order
          properties:
            title:
              type: string
            group:
              type: string
            description:
              type: string
            status:
              type: string
            flag:
              type: boolean
            startDate:
              type: integer
            endDate:
              type: integer
            order:
              type: integer
            dueDate:
              type: integer
    OutputLog:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - message
            - startDate
            - status
            - owner
          properties:
            message:
              type: string
            startDate:
              type: integer
            attachment:
              $ref: '#/components/schemas/OutputAttachment'
            status:
              type: string
            owner:
              type: string
    OutputAlert:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - type
            - source
            - sourceRef
            - title
            - description
            - severity
            - date
            - tags
            - tlp
            - pap
            - read
            - follow
            - customFields
          properties:
            type:
              type: string
            source:
              type: string
            sourceRef:
              type: string
            externalLink:
              type: string
            title:
              type: string
            description:
              type: string
            severity:
              type: integer
            date:
              type: integer
            tags:
              type: array
              items:
                type: string
            tlp:
              type: integer
            pap:
              type: integer
            read:
              type: boolean
            follow:
              type: boolean
            customFields:
              type: array
              items:
                $ref: '#/components/schemas/OutputCustomFieldValue'
            caseTemplate:
              type: string
    ImportedPattern:
      type: object
        required:
          - status
        properties:
          status:
            type: string
          message:
            type: string
          mitreId:
            type: string
          patternName:
            type: string
    OutputPattern:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - patternId
            - name
            - tactics
            - url
            - patternType
            - platforms
            - dataSources
          properties: 
            patternId:
              type: string
            name:
              type: string
            description:
              type: string
            tactics:
              type: array
              items:
                type: string
            url:
              type: string
            patterntype:
              type: string
            platforms:
              type: array
              items:
                type: string
            dataSources:
              type: array
              items:
                type: string
            version:
              type: string
            parent: 
              type: string
    InputProcedure:
      type: object
        required:
          - description
          - occurence
          - caseId
          - patternId
        properties: 
          description:
            type: string
          occurence:
            type: integer
          caseId:
            type: string
          patternId:
            type: string
    OutputProcedure:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          required:
            - description
            - occurence
            - patternId
          properties: 
            description:
              type: string
            occurence:
              type: integer
            patternId:
              type: string
    Query:
      oneOf:
        - $ref: '#/components/schemas/NamedQuery'
        - $ref: '#/components/schemas/GetQuery'
        - $ref: '#/components/schemas/PageQuery'
        - $ref: '#/components/schemas/FilterQuery'
    NamedQuery:
      type: object
      required:
        - _name
      properties:
        _name:
          type: string
          enum:
            - page
            - filter
            - listOrganisation
            - getOrganisation
            - users
            - visible
            - caseTemplates
            - listUsers
            - getUser
            - listCases
            - getCase
            - tasks
            - observables
            - assignableUsers
            - listTask
            - getTask
            - logs
            - listAlert
            - getAlert
          description: >
            Query:
             * `page` - [Any=PageQuery=>] Paginate elements
             * `filter` - [Any=FilterQuery=>Any] Filter elements
             * `listOrganisation` - [INIT=NamedQuery=>Organisation] List all visible organisations
             * `getOrganisation` - [INIT=GetQuery=>Organisation] Select an organisation
             * `users` - [Organisation=NamedQuery=>User] List users of the selected organisations
             * `visible` - [Organisation=NamedQuery=>Organisation] List visible organisation from the selected organisations
             * `caseTemplates` - [Organisation=NamedQuery=>CaseTemplate] List case templates in the selected organisations
             * `listUser` - [INIT=NamedQuery=>User] List all visible users
             * `getUser` - [INIT=GetQuery>User] Selon pourra pas corrigé tous les pb qui apparect an user
             * `listCase` - [INIT=NamedQuery>Case] List all visible cases
             * `getCase` - [INIT=GetQuery=>Case] Select a case
             * `tasks` - [Case=NamedQuery=>Task] List tasks of the selected cases
             * `observables` - [Case=NamedQuery=>Observable] List observables of the selected cases
             * `assignableUsers` - [Case=NamedQuery=>User] List users who can be assigned to selected casess
             * `organisations` - [Case=NamedQuery=>Organisation] List visible organisations of the selected cases
             * `listTask` - [INIT=NamedQuery=>Task] List all visible tasks
             * `getTask` - [INIT=GetQuery=>Task] Select a task
             * `case` - [Task=NamedQuery=>Case] get case of the task
             * `organisations` - [Task=NamedQuery=>Organisation] List visible organisations of the selected tasks
             * `assignableUsers` - [Task=NamedQuery=>User] List users who can be assigned to selected tasks
             * `logs` - [Task=NamedQuery=>Log] List logs of the selected tasks
             * `listAlert` - [INIT=NamedQuery=>Alert] List all visible alerts
             * `getAlert` - [INIT=GetQuery=>Alert] Select an alert
             * `observables` - [Alert=NamedQuery=>Observable] List observables of the selected alerts
             * `case` - [Alert=NamedQuery=>Case] Get case of the imported alert
             * `organisation` - [Alert=NamedQuery=>Organisation] Get organisation of the selected alert
             * `listObservable` - [INIT=NamedQuery=>Observable] List all visible observables
             * `getObservable` - [INIT=GetQuery=>Observable] Select an observable
             * `organisations` - [Observable=NamedQuery=>Organisation] List visible organisations of the selected observables
             * `similar` - [Observable=NamedQuery=>Observable] List similar observables of the selected ones
             * `case` - [Observable=NamedQuery=>Case] get case of the observable
    GetQuery:
      description: "Parameter to select an object by its ID or by its name"
      allOf:
        - $ref: '#/components/schemas/NamedQuery'
        - type: object
          required:
            - idOrName
          properties:
            idOrName:
              type: string
    PageQuery:
      description: "[Any=>] Paginate elements"
      allOf:
        - $ref: '#/components/schemas/NamedQuery'
        - type: object
          required:
            - from
            - to
            - withStats
          properties:
            from:
              type: integer
            to:
              type: integer
            withStats:
              type: boolean
    FilterQuery:
      description: "[Any=>Any] Apply filter on selected elements"
      allOf:
        - $ref: '#/components/schemas/NamedQuery'
        - $ref: '#/components/schemas/Filter'
    AnyValue:
      oneOf:
        - type: number
        - type: boolean
        - type: integer
        - type: string
        - type: object
        - type: array
          items:
            $ref: '#/components/schemas/AnyValue'
    FieldValue:
      type: object
      required:
        - _field
        - _value
      properties:
        _field:
          type: string
        _value:
          $ref: '#/components/schemas/AnyValue'
    Filter:
      oneOf:
        - type: object
          required:
            - _and
          properties:
            _and:
              type: array
              items:
                $ref: '#/components/schemas/Filter'
        - type: object
          required:
            - _or
          properties:
            _or:
              type: array
              items:
                $ref: '#/components/schemas/Filter'
        - type: object
          required:
            - _not
          properties:
            _not:
              $ref: '#/components/schemas/Filter'
        - type: object
          required:
            - _any
          properties:
            _any:
              $ref: '#/components/schemas/AnyValue'
        - type: object
          example:
            _lt:
              tlp: 2
          required:
            - _lt
          properties:
            _lt:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _gt
          properties:
            _gt:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _lte
          properties:
            _lte:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _gte
          properties:
            _gte:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _is
          properties:
            _is:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _startsWith
          properties:
            _startsWith:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _endsWith
          properties:
            _endsWith:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _like
          properties:
            _like:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _wildcard
          properties:
            _wildcard:
              $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _contains
          properties:
            _contains:
              type: string
        - type: object
          required:
            - _id
          properties:
            _id:
              type: string
        - type: object
          required:
            - _between
          properties:
            _between:
              type: object
              required:
                - _field
                - _from
                - _to
              properties:
                _field:
                  type: string
                _from:
                  type: number
                _to:
                  type: number
        - $ref: '#/components/schemas/FieldValue'
        - type: object
          required:
            - _in
          properties:
            _in:
              type: object
              required:
                - _field
                - _values
              properties:
                _field:
                  type: string
                _values:
                  type: array
                  items:
                    $ref: '#/components/schemas/AnyValue'
  securitySchemes:
    Authenticated:
      type: http
      scheme: bearer


